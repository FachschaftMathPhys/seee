<% content_for :css, ".broken, .broken * { color: red }" %>
<% content_for :css, ".itworks, .itworks * { color: darkgreen }" %>
<% content_for :css, ".unknown, .unknown * { color: orange }" %>
<% content_for :script, javascript_include_tag("viewer_count") %>
<% content_for :script do %>
<script>
  function setStatus(object, worked) {
    $("#" + object.toLowerCase())
      .attr("class", (worked ? "itworks" : "broken"))
      .html((worked ? "✔" : "✘")+ " <b>"+object+" </b>");
  }

  function updateUsername() {
    if(usernameValid())
      $("#currentUsername").html("(currently known as <b>" + getUsernameCookie() + "</b>)");
    else
      $("#currentUsername").html("(no username set)");
  }

  function giveWork() {
    if($('.broken').size() !== 0) {
      alert("Please fix the issues mentioned above before continuing.");
      return;
    }

    location.href = location.href + "/assign_work";
  }

  $(document).ready(function() {
    if(getCookie("testcookie") === "test value" || usernameValid()) {
      setStatus("Cookies", true);
    } else {
      document.cookie = "testcookie=test value; expires=Thu, 31 Dec 2020 23:59:59 GMT; path=/"
      $.getJSON("<%=url_for(:controller => "hitmes", :action => "cookie_test")%>",  function(result) {
        setStatus("Cookies", result);
      });

    }

    updateUsername();
    setStatus("Username", usernameValid());
  });
</script>
<% end %>

<div>
  <h2>What is this?</h2>
  Each Hitme is a <b>small unit of work</b>. It requires <b>no time commitment</b> on your side, so you can even do it in very short breaks. You don’t even need to finish if you’re interrupted.<br><br>
  There are multiple steps:
  <ol>
    <li>type handwritten comment</li>
    <li>proofread</li>
    <li>group/sort comments</li>
    <li>final touches</li>
  </ol><br/>

  The last two steps might take more than five minutes, depending on the lecture. If you don’t have that amount of time right now, you can skip this chunk of work and be assigned another one. Or you could start, but mark it as incomplete and leave it for the next person to finish. Just click the correct button below each hitme.
</div>

<div>
  <h2>What do I need?</h2>

  <span class="noscript broken"><b>✘ JavaScript </b></span> – Ensure JavaScript is enabled for the whole domain and that you don’t block any of it’s features.<script>$(".noscript").attr("class", "itworks").html("✔ <b>JavaScript </b>");</script><br/>

  <span id="cookies" class="unknown"><b>? Cookies </b></span> – Enable cookies for the domain. Persistent ones are preferred, so you only need to set your username once.<br/>

  <span id="username" class="unknown"><b>? Username </b></span> – Set a descriptive username, so others may easily identify who is working on what.<br/><br/>

  <a onclick="setUsernameCookie(); setStatus('Username', usernameValid()); updateUsername();"><b>Change Username</b></a>
  <span id="currentUsername"></span><br/><br/>

  <a onclick="giveWork();" style="font-size:120%;font-weight:bold">Give me a chunk of work</a>
</div>


<div>
  <h2>Active Users</h2>
  <% sessions = Session.where(:cont => ["cpics", "pics", "courses"]) %>
  <% if sessions.none? %>
    No active users currently.
  <% else %>
    <table>
      <tr><th>User</th><th>at it for</th><th>last ping</th><th colspan="3">working on</th></tr>
      <% sessions.each do |s| %>
        <%
          c = nil
          step = nil
          course = nil
          case s.cont
            when "cpic" then
              c = CPic.find(s.viewed_id)
            when "pic" then
              c = Pic.find(s.viewed_id)
            when "course" then
              c = Course.find(s.viewed_id)
              step = Hitme::COMBINING
              course = c
            when "tutor" then
              c = Tutor.find(s.viewed_id)
              step = Hitme::COMBINING
            else
              raise "not implemented"
          end
          step ||= c.step
          course ||= c.course


          # fixme: handle final check??
        %>
        <tr>
          <td><%=s.username%></td>
          <td><%=time_ago_in_words(s.created_at)%></td>
          <td><%=time_ago_in_words(s.updated_at, true)%> ago</td>
          <td><%=Hitme.step_to_text(step) %></td>
          <td><%=course.title %></td>
          <td><%=c.for %></td>
        </tr>
      <% end %>
    </table>
  <% end %>
</div>

<% if false %>
<div>
  <h3>Queue Lengths</h3>
  This table shows how many items are in each queue <i>right now</i>. Note that higher items feed the lower ones; say once a bunch of comments have been proofread they may become available for combining. In other words: only zeros read from the top matter.
  <%
    to_type = Hitme.get_all_comments_by_step(0).size
    to_proofread = Hitme.get_all_comments_by_step(1).size
  %>
  <table>
    <tr><th>comments to type</th><td><%=to_type%></td><td></td></tr>
    <tr><th>comments to proofread</th><td><%=to_proofread%></td></tr>
    <tr><th>lectures / tutors to combine</th><td><%= Hitme.get_all_comments_by_step(1).size%></td></tr>
  </table>
</div>
<% end %>
