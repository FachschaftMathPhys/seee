This manual was written using Ubuntu 10.10 installed into a virtual
machine. It assumes you're familiar working with the command line and
hacking source code. You can also download this VirtualBox image if you
don't want to follow this guide.

Ubuntu settings:
  Username:             eval
  Password:             hurrdurr
  computer's name:      eval-testpc

=================
REQUIRED SOFTWARE
=================

packages w/o special treatment
------------------------------

  curl
  autoconf
  bison
  build-essential
  git
  libc6-dev
  libmagick9-dev
  libmysqlclient-dev
  libreadline6
  libreadline6-dev
  libsqlite3-0
  libsqlite3-dev
  libssl-dev
  libxml2-dev
  libxslt-dev
  libyaml-dev
  ncurses-dev
  openssl
  ruby-gnome2
  sqlite3
  texlive
  zlib1g
  zlib1g-dev


Image Processing
----------------

For image processing you can either use your system-provided packages or
build them on your own. Latter might speed up things a bit, but for
starters it's recommended to stick to the system-ones.

A)  if you want to use the system-provided packages:
      imagemagick
      librmagick-ruby

B)  if you want to build your own you'll need to install:
      FIXME
    and run "rake magick:all" once the repository has been checked out.


Ruby & Rails version hell
-------------------------

While it is possible to use system packages for ruby related software as
well, we ran into compatibility problems. The solution to not have to
deal with this is called “RVM” (Ruby Version Manager) and essentially
maintains independent versions of ruby as required.

Usually these steps are sufficient to get RVM running:
  bash <<(curl http://rvm.beginrescueend.com/releases/rvm-install-head)
And add the following line at the end of your .bashrc, .zshrc, …
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"
To see if this worked open a new shell and type execute "rvm". If the
command is not found, please refer to the manual at
  http://rvm.beginrescueend.com/rvm/install/

Then we need to install ruby:
  FIXME required? rvm package install openssl
  rvm install 1.8.7 --with-openssl-dir=$HOME/.rvm/usr

and create a gemset, which will be seperate from your other system gems:
  rvm gemset create "seeeFIXME"

To continue you first need to download a version of =FIXME.


==================
DOWNLOADING =FIXME
==================

For now, you can only clone the repository. To do so run:
  git clone FIXME-URL-TO-GIT


==========================
FINISHING THE INSTALLATION
==========================

Change into the newly created directory. And run
  rvm use 1.8.7@seeeFIXME --rvmrc
which will tell RVM to use the previously installed ruby version and the
matching gemset. --rvmrc saves these settings so they will be used
automatically once you cd in any subdirectory.

Run
  gem install bundler
to install the version management tool that will be used to grab all
other required gems and then
  bundle install
to actually get them. Finally, there's an incompatibility left to solve
by installing an older version of RubyGems.
  update_rubygems

To confirm the basic setup worked, type in
  rake
to get a (large) list of available commands. If not, you probably miss
some packages. Please report any that weren't listed in this manual.

===================
BASIC CONFIGURATION
===================

Have look at
  lib/seee_config.rb
for most settings. The application paths are usually fine and work out
of the box, however you need to specify an URL and matching local path
if you want the extracted comments to be displayed in the web interface.
The relevant variables are:
  :comment_images_public_dir
  :comment_images_public_link

If above directory requires access rights which are different from the
ones your current terminal ownes, you probably want to change the
following variables so the respective commands can read AND write to
those directories once executed. For example, in our setup I am not
allowed to write to /home/eval directly, but I am a member of the eval-
group, so I may login as user "eval". We have a wrapper script for this,
so the relevant command became "login_gruppe_home eval find" instead of
just "find". The relevant variables are:
  :find_comment_image_directory
  :mkdir_comment_image_directory

It has been proven useful to have a directory with all the
questionnaires, in case too few have been printed. This path will be
printed included in the how-tos for the people who carry out an
evaluation so it's important it is up to date. The relevant variable is:
  :forms_howto_dir

If you want to use mass-mailing (you can use it to remind your minions
to carry out their evals and to notify profs that the eval is done) you
have to adjust the following variables:
  :standard_mail_domain
  :standard_mail_from
  :standard_mail_bcc
The bcc part is useful, so you can get a confirmation to your own
address. Your local mail setup will be used, so ensure it works before
trying anything (check using the mail command, for example).

Databases
---------
Now onto the databases. Yes, there are currently two: One for Rails
(i.e. all the profs, courses, tutors and so on) and one for storing the
recognized sheet data. We want to fix that, but until that happens
you’ll have to setup two databases.

* lib/seee_config.rb
  This is the DB where all the results will be stored. Locate
  @@external_database and set them up as you like. The following will
  use an SQLite3 database which will be stored in web/db/results.sqlite3
    @@external_database = {
      :dbi_handler => 'SQLite3',
      :username => '',
      :password => '',
      :database => 'db/results.sqlite3'
    }

* web/config/database.yml
  This is the database Rails uses. You can define different setups for
  a debug or production environment, but for now set them both to the
  same values. (We do this as well and that makes us, by definition, bad
  people). The following will use an SQLite3 database which will be
  stored in web/db/rails.sqlite3
    development:
      adapter: sqlite3
      database: db/rails.sqlite3
      pool: 5
      timeout: 5000

    production:
      adapter: sqlite3
      database: db/rails.sqlite3
      pool: 5
      timeout: 5000

Once the database config is final, run the following to create all
necessary tables:
  cd web && rake db:migrate

=============
MY FIRST EVAL
=============

For now we’ll use Webrick to handle the webpage related work, in the long
run you might want to use Apache instead, though. To start Webrick:
  cd seee/web/script && ./server
If it starts properly, there should be a webpage available at
  http://localhost:3000
where you can enter all your profs, courses, forms, etc. To get an idea of
how the data is organized, here’s a short wrap up:

* Create a new semester to get started, the “current one” is determined
  by the date automatically will always be the active one. For now, it’s
  not possible to change that without hacking.
* Once done you should add forms for the current semester – the
  questionnaires. As of writing, there’s no GUI to help you develop
  these forms and you have to enter them in YAML format. The best method
  is to take one of the included examples in
    doc/example_forms
  and adjust them to your needs. Save often, it will display the form
  as serialized Ruby object if the YAML file is valid. Some parts are
  hard coded into TeX, grep is your friend. Patches welcome.
* Next, add some courses and once done,
* you can add professors and tutors to the course. Profs are “real”
  classes, so you can re-use them, but tutors are just a bunch of names
  that are not connected throughout the application. If it ever comes
  up, “CourseProf” is the model which holds the barcode id and that is
  later used to distinguish the forms. It is therefore possible to have
  more than one prof per lecture and give each of them their own
  evaluation, but you also need to be more careful when handing out the
  sheets.

Once all data is entered, we’ll leave the web interface for now and
work on the console. Change to the root of the repository and run
  rake
You’ll see a lot of options, here are the ones you’re probably most
interested in. They are listed in the order we use them for our eval,
so you can use them one after another to get to your first eval.


rake pdf:howto
--------------
Run this to generate PDF-Howtos in each available language to hand to
the people who carry out an evaluation. You can customize the HowTos
in doc/howto_[lang code].tex.

rake pdf:forms
--------------
Creates the forms for each course and prof that should be printed. The
amount of copies required is included in the filename. When printing the
sheets, ensure that they are printed exactly the same size (i.e. no “fit
to paper”). The default output is A4, but you might be able to change
this in lib/FunkyTeXBits.rb. Unless a semester-id is specified, it will
create forms for the current one.

If you want to customize the available forms, you best have a look at the
existing ones and change them to your needs (you can do this on the web
interface at “Forms”). There’s a GUI generator planned, but not yet
started.

rake images:sortandalign[directory]
-----------------------------------
Before you can use this function, you need to scan the images into two-
sided tif images. Only black-and-white tifs are supported. 300 DPI is
usually enough (and what we use), but you can experiment with different
settings if you like.

“directory” is where to *move* the images from, so make sure “directory”
is writable before running this. The function will try to recognize the
bar code and sort them depending on the form type into different folders
in our tmp directory.

rake pest:omr
-------------
This will work on the images previously sorted into the tmp directory
and recognize if a certain field is filled out or if a comment field is
empty or not. It may be required to hack some magic numbers in the
pest/omr.rb file, but we’re working on improving that.

If you do this for the first time, you probably want to run it with
debug output on, so you’ll get a graphical representation of what’s
going on. Run pest/omr.rb without any arguments to get a list of
possible command line options. The following line should get you
started for your debugging purposes:

  ./pest/omr.rb -s "./tmp/images/0.yaml" -p "./tmp/images/0" -d -v


rake pest:correct
-----------------
For many questions there will be more than one cross detected, either
because it wasn’t clear enough the question at hand is single-choice
or if a correction was made. Testing showed that without educating
how to mark an incorrect field, there are numerous ways of correcting
and no auto-detection was possible.

You can use the arrow-keys to select the correct answer or choose the
box in the upper left corner to mark an answer invalid.

rake pest:yaml2db
-----------------
This will copy the results of the previous command (these were stored
in YAML files) into a database which will be used from now on. It is
planned to remove this step altogether and use a database from the
beginning, with optional YAML output.

rake images:insertcomments
--------------------------
This grabs the recognized comments and makes them available in the
web interface (under each course and/or tutor). Note that you need
to configure the used directories in seee_config first (see above).


When you’re done, switch to the webinterface and type the comments,
write a summary for each course and/or tutor.

rake pdf:semester
-----------------
Without parameters, this will generate results in one PDF per
faculty for the current semester. You can run rake pdf:make_
preliminary to mark these results as not final and that they shouldn’t
be handed to anyone.


“Rolling Eval”
--------------
You can execute all of the above commands as often as you wish without
creating duplicates anywhere (except maybe for images:insertcomments…
I haven’t checked, but if you notice it creates dups, please create a
ticket). Anyway, this makes it possible to create a rolling eval, i.e.
add new sheets each evening and hand the results so far to whomever you
like. I don’t recommend advertising this on your first go, but remember
it will be possible later.

If you’ve made it so far, congratulations! This is your first eval.
