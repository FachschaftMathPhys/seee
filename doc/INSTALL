This manual was written using Ubuntu 10.10 installed into a virtual
machine. It assumes you're familiar working with the command line and
hacking source code. You can also download this VirtualBox image if you
don't want to follow this guide. If you believe you’re pro enough,
there’s a summary at the end of this guide which only list the commands
without all that explanation blahblah.

Ubuntu settings:
  Username:             gnt-eval
  Password:             gnt-eval
  computer's name:      gnt-eval

=================
REQUIRED SOFTWARE
=================

packages w/o special treatment
------------------------------

  autoconf
  barcode
  bison
  build-essential
  curl
  git
  gs
  libc6-dev
  libmagick9-dev
  libmysqlclient-dev
  libpq-dev
  libreadline6
  libreadline6-dev
  libsqlite3-0
  libsqlite3-dev
  libssl-dev
  libxml2-dev
  libxslt-dev
  libyaml-dev
  libzbar0
  ncurses-dev
  openssl
  postgresql
  sqlite3
  texlive
  texlive-fonts-extra
  texlive-lang-german
  texlive-latex-extra
  tex-gyre
  zlib1g
  zlib1g-dev

Database Backend
----------------

This guide uses PostgreSQL as a database backend. All necessary packages
for MySQL support are installed as well, so if you prefer MySQL simply
change the configuration later on.

Any other backend, that is as powerful as MySQL or PostgreSQL will be
fine, too, but you need to install all necessary packages and Ruby Gems
yourself.

I advise against using SQLite because it supports standard deviation
only through an extension which must be manually installed. Furthermore,
it needs to be loaded each time from within this project, so you’ll have
to hack the source and end up with a still limited database system.


Ruby & Rails version hell
-------------------------

While it is possible to use system packages for ruby related software as
well, we ran into compatibility problems. The solution to not have to
deal with this is called “RVM” (Ruby Version Manager) and essentially
maintains independent versions of ruby as required.

Usually these steps are sufficient to get RVM running:
  bash -s stable < <( curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
And add the following line at the end of your .bashrc, .zshrc, …
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"
To see if this worked open a new shell and type execute "rvm". If the
command is not found, please refer to the manual at
  http://rvm.beginrescueend.com/rvm/install/

Then we need to install openssl and ruby:
  rvm pkg install openssl
  rvm install 1.8.7-p334 --with-zlib-dir=/usr  --with-openssl-dir=$HOME/.rvm/usr
and create a gemset, which will be seperate from your other system gems:
  rvm 1.8.7-p334
  rvm gemset create 'gnt-eval'


Image Processing
----------------

For image processing you can either use your system-provided packages or
build them on your own. Latter might speed up things a bit, but for
starters it's recommended to stick to the system-ones.

A)  if you want to use the system-provided packages:
      imagemagick
      librmagick-ruby

B)  if you want to build your own you'll need to additionally install:
      ruby1.8-dev
    and run "rake magick:all" once the repository has been checked out.
    You can install the system libraries alongside the custom repository
    without any problems. This way you can uninstall the custom versions
    at any time you like. If you run into problems, like segmentation
    faults, it’s probably better to stick with the system libraries
    because debugging the ImageMagick-RMagick-ZBar combo can be a lot of
    effort.


To continue you first need to download a version of G'n'T.


=================
DOWNLOADING G'n'T
=================

For now, you can only clone the repository. To do so run:
  git clone FIXME-URL-TO-GIT

If you run this in a virtual machine, you can use the “Shared Folders”
feature of VirtualBox to mount a directory from the host machine. First,
add the folder then run
  sudo mount -t vboxsf gnt-repository-on-host /home/gnt-eval/gnt-eval
to mount the directory for this session or add it to the fstab file.

==========================
FINISHING THE INSTALLATION
==========================

Change into the newly created directory. RVM will likely ask you to
confirm that the included .rvmrc is fine. Type 'yes' then press enter
to trust G'n'T’s .rvmrc.

Run
  gem install bundler
to install the version management tool that will be used to grab all
other required gems and then
  bundle install
to actually get them. Finally, there's an incompatibility left to solve
by installing an older version of RubyGems.
  update_rubygems

If, for some reason, bundle install reports an error with glib2 not being
built, featuring a “checking for gobject-2.0... no” error message, try
the following (choose the first for 64 bit systems, latter for 32 bit):
PKG_CONFIG_PATH="/usr/lib/x86_64-linux-gnu/pkgconfig/" bundle install
PKG_CONFIG_PATH="/usr/lib/i386-linux-gnu/pkgconfig/" bundle install

To confirm the basic setup worked, type in
  rake
to get a (large) list of available commands. If not, you probably miss
some packages. Please report any that weren't listed in this manual.

===================
BASIC CONFIGURATION
===================

Have look at
  web/config/seee_config.rb
for most settings. It’s not recommended to edit this file directly, but
rather use the system wide and user configuration file. For details, see
the boilerplate comment in the file.

The application paths are usually fine and work out of the box, however
you need to specify an URL and matching local path if you want the
extracted comments to be displayed in the web interface.
The relevant variables are:
  :comment_images_public_dir
  :comment_images_public_link
Good defaults that will work for a basic setup:
  :comment_images_public_dir  => File.join(RAILS_ROOT, "public", "comments")
  :comment_images_public_link => "http://localhost:3000/comments"
(Attention: Don’t delete trailing commas in seee_config.rb, if they are
present in the default file. Otherwise you’ll get syntax errors and it
won’t work.)

If above directory requires access rights which are different from the
ones your current terminal ownes, you probably want to change the
following variables so the respective commands can read AND write to
those directories once executed. For example, in our setup I am not
allowed to write to /home/eval directly, but I am a member of the eval-
group, so I may login as user "eval". We have a wrapper script for this,
so the relevant command became "login_gruppe_home eval cp" instead of
just "cp". The relevant variables are:
  :cp_comment_image_directory
  :mkdir_comment_image_directory
If you use the values from above, simply leave these on their default
values.

It has been proven useful to have a directory with all the
questionnaires, in case too few have been printed. This path will be
printed included in the how-tos for the people who carry out an
evaluation so it's important it is up to date. The relevant variable is:
  :forms_howto_dir
A good default would be the folder where they are stored when being
created. However, there’s a lot of other stuff in that folder, so people
might get confused:
  :forms_howto_dir => File.join(RAILS_ROOT, "..", "tmp", "forms")

If you want to use mass-mailing (you can use it to remind your minions
to carry out their evals and to notify profs that the eval is done) you
have to adjust the following variables:
  :standard_mail_domain
  :standard_mail_from
  :standard_mail_bcc
The bcc part is useful, so you can get a confirmation to your own
address. Your local mail setup will be used, so ensure it works before
trying anything (check using the mail command, for example).

Databases
---------
Now onto the databases. Yes, there are two: One for Rails (i.e. all the
profs, courses, tutors and so on) and one for storing the recognized
sheet data. So you’ll have to setup two databases.

To get access to PostgreSQL features, you’ll have to login as postgres
user. To do so, run:
  sudo -u postgres -s
Now you’ll be able to execute PostgreSQL specific commands. First, run
  createuser -P gnt-eval
to create a new user called “gnt-eval”. The -P switch will prompt you for
a password, leave it out to create a user with no password (our password
will again be “gnt-eval”). You will be asked some questions, answer them
as you see fit.

* web/config/seee_config.rb
  This is the DB where all the results will be stored. Locate
  @@external_database and set them up as you like. Don’t modify this
  file directly and rather use the system wide or user configuration
  file. Read the boilerplate comment on how this can be accomplished.
  The following will use Postgres with the user created above:
    @@external_database = {
      :dbi_handler => 'Pg',
      :username => 'gnt-eval',
      :password => 'gnt-eval',
      :host => 'localhost',
      :database => 'results'
    }
  Still logged in as postgres, run the following to create the database:
    createdb results

* web/config/database.yml
  This is the database Rails uses. You can define different setups for
  a debug or production environment, but for now set them both to the
  same values. (We do this as well and that makes us, by definition, bad
  people). Like with seee_config, database.yml has system wide and user
  configuration files, see the boilerplate comment for details.
  Again, run
    createdb rails
  while still logged in as postgres user and update the database.yml:
    login: &login
      adapter:  postgresql
      username: <%= Seee::Config.external_database[:username] %>
      password: <%= Seee::Config.external_database[:password] %>
      host:     <%= Seee::Config.external_database[:host] %>

    development:
      <<: *login
      database: rails

    production:
      <<: *login
      database: rails

Note that Rails and DBI use different handlers/adapters and that you
need to install a different gem for each. For a list of available DBI
handlers you can have a look at its documentation:
  http://ruby-dbi.rubyforge.org/rdoc/index.html
I haven’t found a list of available Rails adapters, but you can view the
ones installed on your system by listing the following directory:
  activerecord-(version number)/lib/active_record/connection_adapters
Alternatively, just enter this command:
  locate *active_record/connection_adapters/*_adapter.rb

Once the database config is final, run the following to create all
necessary tables:
  cd web && rake db:migrate

=============
MY FIRST EVAL
=============

For now we’ll use Webrick to handle the webpage related work, in the long
run you might want to use Apache instead, though. To start Webrick:
  cd web/script && ./server
If it starts properly, there should be a webpage available at
  http://localhost:3000
where you can enter all your profs, courses, forms, etc. To get an idea of
how the data is organized, here’s a short wrap up:

* Create a new semester to get started, the “current one” is determined
  by the date automatically will always be the active one. For now, it’s
  not possible to change that without hacking.
* Once done you should add forms for the current semester – the
  questionnaires. As of writing, there’s no GUI to help you develop
  these forms and you have to enter them in YAML format. The best method
  is to take one of the included examples in
    doc/example_forms
  and adjust them to your needs. Save often, it will display the form
  as serialized Ruby object if the YAML file is valid. Some parts are
  hard coded into TeX, grep is your friend. Patches welcome. Comments
  with a db column attribute ending in “ucomment” will be placed at the
  tutor’s page if one was selected. All other comments will be put in
  the course section. The save_as attribute will only contain hyphens,
  and latin1 alphanumerals (0-9, a-z, A-Z). It is derived from the db
  column and cannot be entered separately.
* Next, add some courses and once done,
* you can add professors and tutors to the course. Profs are “real”
  classes, so you can re-use them, but tutors are just a bunch of names
  that are not connected throughout the application. If it ever comes
  up, “CourseProf” is the model which holds the barcode id and that is
  later used to distinguish the forms. It is therefore possible to have
  more than one prof per lecture and give each of them their own
  evaluation, but you also need to be more careful when handing out the
  sheets.

Once all data is entered, we’ll leave the web interface for now and
work on the console. Change to the root of the repository and run
  rake
You’ll see a lot of options, most of which you can ignore.


Below follows a list of commands you’ll likely need. They are ordered so
that you can check off each step/command and end up with a complete eval
that can be handed out to everyone.


rake pdf:howto
--------------
Run this to generate PDF-Howtos in each available language to hand to
the people who carry out an evaluation. You can customize the HowTos
in doc/howto_[lang code].tex.

rake pdf:forms
--------------
Creates the forms for each course and prof that should be printed. The
amount of copies required is included in the filename.

Printing
--------
When printing the sheets, ensure that they are printed exactly the same
size (i.e. no “fit to paper”). The default output is A4, but you might
be able to change this in lib/FunkyTeXBits.rb. Unless a semester-id is
specified, it will create forms for the current one.

rake images:scan
----------------
Calls the default scan script, which you can find in tools/scan.sh. If
the script doesn’t work for you, even after installing “sane”, you likely
want to point it to your customized version using seee_config (see above,
the variable is application_paths/scan).

If you change the script ensure that it only outputs two-sided, black/
white tif images.

rake images:sortandalign
------------------------
Before you can use this function, you need to scan the images into two-
sided tif images. Only black-and-white tifs are supported. 300 DPI is
usually enough (and what we use), but you can experiment with different
settings if you like.

If you specify a custom “directory”, make sure it is writable before
running this command. This is required because the images are moved and
edited in-place rather than copied. If you used images:scan or placed
them into tmp/scanned you can omit the directory.

The function will try to recognize the bar code and sort them depending
on the form type into different folders in our tmp directory.

If you get a lot of errors that are zbarimg related, the included exe-
cutable is probably out of date compared to the libraries on your
system. In that case, run “rake magick:buildZBar” to build a custom
version.

rake pest:omr
-------------
This will work on the images previously sorted into the tmp directory
and recognize if a certain field is filled out or if a comment field is
empty or not. It may be required to hack some magic numbers in the
pest/omr2.rb file, but we’re working on improving that.

If you do this for the first time, you probably want to run it with
debug output on, so you’ll get a graphical representation of what’s
going on. Run pest/omr2.rb without any arguments to get a list of
possible command line options. The following line should get you
started for your debugging purposes:

  ./pest/omr2.rb -s "./tmp/images/0.yaml" -p "./tmp/images/0" -d -v

Activating debugging mode will store the data in an SQLite file in the
working directory, so don’t worry about overwriting something in your
production database

rake pest:correct
-----------------
For many questions there will be more than one cross detected, either
because it wasn’t clear enough the question at hand is single-choice
or if a correction was made. Testing showed that without educating
how to mark an incorrect field, there are numerous ways of correcting
and no auto-detection was possible.

You can use the arrow-keys to select the correct answer or choose the
box in the upper left corner to mark an answer invalid.

rake images:insertcomments
--------------------------
This grabs the recognized comments and makes them available in the
web interface (under each course and/or tutor). Note that you need
to configure the used directories in seee_config first (see above).

Typing the comments/summaries
-----------------------------
When you’re done, switch to the webinterface and type the comments,
write a summary for each course and/or tutor. Each field is directly
passed to LaTeX so you’re not limited to some design options. If you
need further packages add them in tex/results_preamble.tex.erb. If you
want to draw images you can use “Dia” which can export as LaTeX PGF. The
code can be pasted directly into the comment field and should render out
of the box. If you want to include raster images, specify an absolute
path somewhere on your disk.

rake pdf:semester
-----------------
Without parameters, this will generate results in one PDF per
faculty for the current semester. You can run rake pdf:make_
preliminary to mark these results as not final and that they shouldn’t
be handed to anyone.

“Rolling Eval”
--------------
You can execute all of the above commands as often as you wish without
creating duplicates anywhere. This makes it possible to create a rolling
eval, i.e. add new sheets each evening and hand the results so far to
whomever you like. I don’t recommend advertising this on your first go,
but remember it will be possible later.

If you’ve made it so far, congratulations! This is your first eval.


==================
THINGS TO CONSIDER
==================

* Don’t rank. Many people believe creating a rank will actually solve
  problems and over time improve the quality of the evaluated object.
  There are many good reasons, but the main reasons are:
    - oversimplification of the issue
    - easy to dismiss by /anyone/
    - doesn’t help interested people to improve themselves at all
    - doesn’t make uninterested people magically better or interested
  The results are just a bunch of worthless numbers unless you go to the
  people involved, talk to them and offer them help where appropriate.

  If you do it RIGHT, the actual evaluation will be the least amount of
  work to be done. Seriously, don’t rank.

* If you want to make the web interface available from the internet,
  be sure to add HTTP-Authentication or similar to protect your data.
  There’s no user/admin scheme in G'n'T, so everyone may to every-
  thing. If someone is not trustworthy, don’t give them access.

* Submit patches. Please do. We are only a small team and are happy for
  any help. Even though the project does not yet follow the following
  guidelines everywhere, they should be used nonetheless:
    - use_underscores_for_everything_but_classes
    - ClassesShouldUseCamelCase
    - Language is English
    - indent with 2 spaces, no tabs.
    - file encoding must be UTF-8.


=======
SUMMARY
=======

sudo apt-get install curl git autoconf barcode bison build-essential gs libc6-dev libmagick9-dev libmysqlclient-dev libpq-dev libreadline6 libreadline6-dev libsqlite3-0 libsqlite3-dev libssl-dev libxml2-dev libxslt-dev libyaml-dev libzbar0 ncurses-dev openssl postgresql sqlite3 texlive texlive-fonts-extra texlive-lang-german texlive-latex-extra tex-gyre zlib1g zlib1g-dev imagemagick librmagick-ruby

Above command will take forever, wait until curl and git are installed,
then continue without waiting for it to finish.

bash -s stable < <( curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rv
m-installer)

Add this line at the end of .bashrc/.zshrc/etc.:
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

Open new shell

rvm pkg install openssl
rvm install 1.8.7-p334 --with-zlib-dir=/usr --with-openssl-dir=$HOME/.rvm/usr
rvm 1.8.7-p334
rvm gemset create 'gnt-eval'

git clone http://FIXME seee
cd seee
yes[Enter]

bundle install
update_rubygems

See the detailed documentation above if bundle install fails.

Leave the configuration options on their defaults, they should work
out of the box.

sudo -u postgres -s
createuser -P gnt-eval
gnt-eval[Enter]
gnt-eval[Enter]
y[Enter]
createdb rails
createdb results
exit

cd web && rake db:migrate
./script/server

Open new terminal
cd seee

x-www-browser http://localhost:3000&
Add data in WWW-Browser, use forms from doc/example_forms

rake pdf:howto
rake pdf:forms

Print forms and evaluate.

rake images:scan
      OR
scan 300 DPI, b/w, two-page TIFs to tmp/scanned

rake images:sortandaligm
rake pest:omr
rake pest:correct
rake images:insertcomments

x-www-browser http://localhost:3000&
Type comments for each course/tutor in web interface

rake pdf:semester
rake pdf:make_preliminary
